/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : Document Properties
 #	author : miyako
 #	2016/11/24
 #
 # --------------------------------------------------------------------------------*/


#include "4DPluginAPI.h"
#include "4DPlugin.h"

#if VERSIONMAC
time_t _GetUnixTime(C_DATE &fDate, C_TIME &fTime)
{
	time_t unixTime = 0;
	
	UInt16 year;
	UInt16 month;
	UInt16 day;
	
	fDate.getYearMonthDay(&year, &month, &day);
	
	UInt8 hour;
	UInt8 minute;
	UInt8 second;
	
	fTime.getHourMinuteSecond(&hour, &minute, &second);
	
	CFGregorianDate gregDate;
	gregDate.year = year;
	gregDate.month = month;
	gregDate.day = day;
	gregDate.hour = hour;
	gregDate.minute = minute;
	gregDate.second = second;
	
	NSDate *nDate = (NSDate *)CFDateCreate(kCFAllocatorDefault, CFGregorianDateGetAbsoluteTime(gregDate, (CFTimeZoneRef)[NSTimeZone localTimeZone]));
	
	unixTime = [nDate timeIntervalSince1970];
	
	[nDate release];
	
	return unixTime;
}

void _NSDateGetDateTime(NSDate *nDate, C_DATE &fDate, C_TIME &fTime)
{
	if(nDate){
		
		NSDate *lDate = [[NSDate alloc]initWithTimeInterval:[[NSTimeZone defaultTimeZone]secondsFromGMTForDate:nDate]sinceDate:nDate];
		
		NSString *description = [lDate description];
		
		if([description length] == 25)
		{
			fDate.setYearMonthDay(
														[[description substringWithRange:NSMakeRange(0,4)]integerValue],
														[[description substringWithRange:NSMakeRange(5,2)]integerValue],
														[[description substringWithRange:NSMakeRange(8,2)]integerValue]
														);
			
			int hour = [[description substringWithRange:NSMakeRange(11,2)]integerValue];
			int minute = [[description substringWithRange:NSMakeRange(14,2)]integerValue];
			int second = [[description substringWithRange:NSMakeRange(17,2)]integerValue];
			
			fTime.setSeconds(second + (minute * 60) + (hour * 3600));
			
		}
		[lDate release];
	}
}

NSInteger _C_TEXTGetPathDate(C_TEXT &pathString, NSString *key, C_DATE &fDate, C_TIME &fTime){
	
	NSInteger errorCode = 0;
	
	if(key){
		
		NSFileManager *defaultManager = [[NSFileManager alloc]init];
		NSString *path = pathString.copyPath();
		
		NSDictionary *attributes = nil;
		NSError *error = nil;
		
		attributes = [defaultManager attributesOfItemAtPath:path error:&error];
		
		if(attributes){
			
			if([key isEqualToString:NSFileCreationDate])
				_NSDateGetDateTime([attributes fileCreationDate], fDate, fTime);
			
			if([key isEqualToString:NSFileModificationDate])
				_NSDateGetDateTime([attributes fileModificationDate], fDate, fTime);
			
			if([key isEqualToString:NSFileAccessDate]){
				
				struct stat output;
				int ret = stat([path UTF8String], &output);
				
				if(!ret){
					_NSDateGetDateTime([NSDate dateWithTimeIntervalSince1970:output.st_atime], fDate, fTime);
				}else{
					errorCode = errno;
				}
				
			}
			
		}else{
			errorCode = [error code];
		}
		
		[path release];
		[defaultManager release];
		
	}
	
	return errorCode;
}

NSInteger _C_TEXTSetPathDate(C_TEXT &pathString, NSString *key, C_DATE &fDate, C_TIME &fTime){
	
	NSInteger errorCode = 0;
	
	if(key){
		
		NSFileManager *defaultManager = [[NSFileManager alloc]init];
		NSString *path = pathString.copyPath();
		
		if([key isEqualToString:NSFileAccessDate]){
			
			struct stat output;
			int ret = stat([path UTF8String], &output);
			
			if(!ret){
				
				timeval times[2];
				
				times[0].tv_sec = _GetUnixTime(fDate, fTime);
				times[1].tv_sec = output.st_mtimespec.tv_sec;
				
				if(utimes([path UTF8String], times))
					errorCode = errno;
				
			}else{
				errorCode = errno;
			}
			
		}else{
			
			UInt16 year;
			UInt16 month;
			UInt16 day;
			
			fDate.getYearMonthDay(&year, &month, &day);
			
			UInt8 hour;
			UInt8 minute;
			UInt8 second;
			
			fTime.getHourMinuteSecond(&hour, &minute, &second);
			
			CFGregorianDate gregDate;
			gregDate.year = year;
			gregDate.month = month;
			gregDate.day = day;
			gregDate.hour = hour;
			gregDate.minute = minute;
			gregDate.second = second;
			
			NSDate *nDate = (NSDate *)CFDateCreate(kCFAllocatorDefault, CFGregorianDateGetAbsoluteTime(gregDate, (CFTimeZoneRef)[NSTimeZone localTimeZone]));
			
			NSDictionary *attributes = [NSDictionary dictionaryWithObject:nDate forKey:key];
			
			NSError *error = nil;
			
			if(![defaultManager setAttributes:attributes ofItemAtPath:path error:&error])
				errorCode = [error code];
			
			[nDate release];
		}
		
		[path release];
		[defaultManager release];
		
	}
	
	return errorCode;
}
#endif

#if VERSIONWIN

typedef enum
{
	NSFileCreationDate = 0,
	NSFileModificationDate,
	NSFileAccessDate
	
} NSFileDate;

unsigned int _C_TEXTGetPathDate(C_TEXT &pathString, NSFileDate key, C_DATE &fDate, C_TIME &fTime)
{
	unsigned int errorCode = 0;
	
	HANDLE hFile = CreateFile((LPCTSTR)pathString.getUTF16StringPtr(),
														GENERIC_READ,
														FILE_SHARE_READ | FILE_SHARE_WRITE,
														0,
														OPEN_EXISTING,
														FILE_FLAG_BACKUP_SEMANTICS,
														0);
	
	if(hFile != INVALID_HANDLE_VALUE){
		
		FILETIME creationTime, lastWriteTime, lastAccessTime;
		
		if(GetFileTime(hFile, &creationTime, &lastWriteTime, &lastAccessTime)){
			
			FILETIME fileTime;
			
			switch (key){
				case NSFileCreationDate:
					fileTime = creationTime;
					break;
				case NSFileModificationDate:
					fileTime = lastWriteTime;
					break;
				case NSFileAccessDate:
					fileTime = lastAccessTime;
					break;
			}
			
			FILETIME localFileTime;
			SYSTEMTIME systemTime;
			
			if(FileTimeToLocalFileTime(&fileTime, &localFileTime)){
				
				if(FileTimeToSystemTime(&localFileTime, &systemTime)){
					
					fDate.setYearMonthDay(systemTime.wYear, systemTime.wMonth, systemTime.wDay);
					fTime.setHourMinuteSecond((unsigned char)systemTime.wHour, (unsigned char)systemTime.wMinute, (unsigned char)systemTime.wSecond);
					
				}else{
					errorCode = GetLastError();
				}
				
			}else{
				errorCode = GetLastError();
			}
			
		}else{
			errorCode = GetLastError();
		}
		
		CloseHandle(hFile);
		
	}
	
	return errorCode;
}

unsigned int _C_TEXTSetPathDate(C_TEXT &pathString, NSFileDate key, C_DATE &fDate, C_TIME &fTime)
{
	unsigned int errorCode = 0;
	
	HANDLE hFile = CreateFile((LPCTSTR)pathString.getUTF16StringPtr(),
														GENERIC_WRITE,
														FILE_SHARE_READ | FILE_SHARE_WRITE,
														0,
														OPEN_EXISTING,
														FILE_FLAG_BACKUP_SEMANTICS,
														0);
	
	if(hFile != INVALID_HANDLE_VALUE){
		
		FILETIME localFileTime, fileTime;
		SYSTEMTIME systemTime;
		
		uint16_t year = 0;
		uint16_t month = 0;
		uint16_t day = 0;
		
		fDate.getYearMonthDay(&year, &month, &day);
		
		systemTime.wYear = year;
		systemTime.wMonth = month;
		systemTime.wDay = day;
		
		unsigned char hour = 0;
		unsigned char minute = 0;
		unsigned char second = 0;
		
		fTime.getHourMinuteSecond(&hour, &minute, &second);
		
		systemTime.wHour = hour;
		systemTime.wMinute = minute;
		systemTime.wSecond = second;
		
		systemTime.wMilliseconds  = 0;
		systemTime.wDayOfWeek = 0;
		
		if(SystemTimeToFileTime(&systemTime, &localFileTime)){
			
			if(LocalFileTimeToFileTime(&localFileTime, &fileTime)){
				
				switch (key){
					case NSFileCreationDate:
						if(!SetFileTime(hFile, &fileTime, NULL, NULL))
							errorCode = GetLastError();
						break;
					case NSFileModificationDate:
						if(!SetFileTime(hFile, NULL, NULL, &fileTime))
							errorCode = GetLastError();
						break;
					case NSFileAccessDate:
						if(!SetFileTime(hFile, NULL, &fileTime, NULL))
							errorCode = GetLastError();
						break;
				}
				
			}else{
				errorCode = GetLastError();
			}
			
		}else{
			errorCode = GetLastError();
		}
		
		CloseHandle(hFile);
		
	}else{
		errorCode = GetLastError();
	}
	
	return errorCode;
}
#endif

#pragma mark -

void PluginMain(PA_long32 selector, PA_PluginParameters params)
{
	try
	{
		PA_long32 pProcNum = selector;
		sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
		PackagePtr pParams = (PackagePtr)params->fParameters;

		CommandDispatcher(pProcNum, pResult, pParams); 
	}
	catch(...)
	{

	}
}

void CommandDispatcher (PA_long32 pProcNum, sLONG_PTR *pResult, PackagePtr pParams)
{
	switch(pProcNum)
	{
// --- Files and Folders

		case 1 :
			PATH_Get_creation_date(pResult, pParams);
			break;

		case 2 :
			PATH_Set_modification_date(pResult, pParams);
			break;

		case 3 :
			PATH_Get_modification_date(pResult, pParams);
			break;

		case 4 :
			PATH_Set_creation_date(pResult, pParams);
			break;

		case 5 :
			PATH_Get_access_date(pResult, pParams);
			break;

		case 6 :
			PATH_Set_access_date(pResult, pParams);
			break;

		case 7 :
			PATH_Get_hidden(pResult, pParams);
			break;

		case 8 :
			PATH_Set_hidden(pResult, pParams);
			break;

	}
}

#pragma mark -

// ------------------------------- Files and Folders ------------------------------

void PATH_Get_creation_date(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_DATE Param2;
	C_TIME Param3;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	
#if VERSIONMAC
	returnValue.setIntValue(_C_TEXTGetPathDate(Param1, NSFileCreationDate, Param2, Param3));
#else
	returnValue.setIntValue(_C_TEXTGetPathDate(Param1, NSFileCreationDate, Param2, Param3));
#endif
	
	Param2.toParamAtIndex(pParams, 2);
	Param3.toParamAtIndex(pParams, 3);
	returnValue.setReturn(pResult);
}

void PATH_Set_modification_date(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_DATE Param2;
	C_TIME Param3;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param3.fromParamAtIndex(pParams, 3);
	
#if VERSIONMAC
	returnValue.setIntValue(_C_TEXTSetPathDate(Param1, NSFileModificationDate, Param2, Param3));
#else
	returnValue.setIntValue(_C_TEXTSetPathDate(Param1, NSFileModificationDate, Param2, Param3));
#endif
	
	returnValue.setReturn(pResult);
}

void PATH_Get_modification_date(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_DATE Param2;
	C_TIME Param3;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	
#if VERSIONMAC
	returnValue.setIntValue(_C_TEXTGetPathDate(Param1, NSFileModificationDate, Param2, Param3));
#else
	returnValue.setIntValue(_C_TEXTGetPathDate(Param1, NSFileModificationDate, Param2, Param3));
#endif
	
	Param2.toParamAtIndex(pParams, 2);
	Param3.toParamAtIndex(pParams, 3);
	returnValue.setReturn(pResult);
}

void PATH_Set_creation_date(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_DATE Param2;
	C_TIME Param3;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param3.fromParamAtIndex(pParams, 3);
	
#if VERSIONMAC
	returnValue.setIntValue(_C_TEXTSetPathDate(Param1, NSFileCreationDate, Param2, Param3));
#else
	returnValue.setIntValue(_C_TEXTSetPathDate(Param1, NSFileCreationDate, Param2, Param3));
#endif
	
	returnValue.setReturn(pResult);
}

void PATH_Get_access_date(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_DATE Param2;
	C_TIME Param3;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	
#if VERSIONMAC
	returnValue.setIntValue(_C_TEXTGetPathDate(Param1, NSFileAccessDate, Param2, Param3));
#else
	returnValue.setIntValue(_C_TEXTGetPathDate(Param1, NSFileAccessDate, Param2, Param3));
#endif
	
	Param2.toParamAtIndex(pParams, 2);
	Param3.toParamAtIndex(pParams, 3);
	returnValue.setReturn(pResult);
}

void PATH_Set_access_date(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_DATE Param2;
	C_TIME Param3;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param3.fromParamAtIndex(pParams, 3);
	
#if VERSIONMAC
	returnValue.setIntValue(_C_TEXTSetPathDate(Param1, NSFileAccessDate, Param2, Param3));
#else
	returnValue.setIntValue(_C_TEXTSetPathDate(Param1, NSFileAccessDate, Param2, Param3));
#endif
	
	returnValue.setReturn(pResult);
}

void PATH_Get_hidden(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_LONGINT Param2;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	
#if VERSIONMAC
	NSString *path = Param1.copyPath();
	
	struct stat output;
	int ret = stat([path UTF8String], &output);
	
	if(!ret){
		Param2.setIntValue((output.st_flags & UF_HIDDEN) != 0);
	}else{
		returnValue.setIntValue(errno);
	}
	
	[path release];
#else
	DWORD attributes = GetFileAttributes((LPCTSTR)Param1.getUTF16StringPtr());
	if(attributes != INVALID_FILE_ATTRIBUTES){
		Param2.setIntValue((attributes & FILE_ATTRIBUTE_HIDDEN) != 0);
	}else{
		returnValue.setIntValue(GetLastError());
	}
#endif
	
	Param2.toParamAtIndex(pParams, 2);
	returnValue.setReturn(pResult);
}

void PATH_Set_hidden(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_LONGINT Param2;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	
#if VERSIONMAC
	NSString *path = Param1.copyPath();
	
	struct stat output;
	int ret = stat([path UTF8String], &output);
	
	if(!ret){
		
		if(Param2.getIntValue()){
			if(chflags([path UTF8String], output.st_flags | UF_HIDDEN))
				returnValue.setIntValue(errno);
		}else{
			if(chflags([path UTF8String], output.st_flags & ~(UF_HIDDEN)))
				returnValue.setIntValue(errno);
		}
		
	}else{
		returnValue.setIntValue(errno);
	}
	
	[path release];
#else
	DWORD attributes = GetFileAttributes((LPCTSTR)Param1.getUTF16StringPtr());
	if(attributes != INVALID_FILE_ATTRIBUTES){
		
		if(Param2.getIntValue()){
			if(!SetFileAttributes((LPCTSTR)Param1.getUTF16StringPtr(), attributes | FILE_ATTRIBUTE_HIDDEN))
				returnValue.setIntValue(GetLastError());
		}else{
			if(!SetFileAttributes((LPCTSTR)Param1.getUTF16StringPtr(), attributes & ~(FILE_ATTRIBUTE_HIDDEN)))
				returnValue.setIntValue(GetLastError());
		}
		
	}else{
		returnValue.setIntValue(GetLastError());
	}
#endif
	
	returnValue.setReturn(pResult);
}

